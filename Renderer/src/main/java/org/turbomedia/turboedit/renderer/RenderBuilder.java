package org.turbomedia.turboedit.renderer;

import net.bramp.ffmpeg.FFmpeg;
import net.bramp.ffmpeg.FFmpegExecutor;
import net.bramp.ffmpeg.FFprobe;
import net.bramp.ffmpeg.builder.FFmpegBuilder;
import org.apache.commons.io.FileUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.turbomedia.turboedit.shared.project.Project;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.time.Duration;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;

public class RenderBuilder {
    private static final Logger logger = LoggerFactory.getLogger(RenderBuilder.class);

    public static RenderItem BuildFfmpeg(Project project, int timelineIndex, FFmpeg ffmpeg, FFprobe ffprobe, String projectPath, String output) throws IOException {
        var basePath = Path.of(projectPath).getParent();
        var fileContent = new ArrayList<String>();
        var subThreads = new ArrayList<Thread>();
        var executor = new FFmpegExecutor(ffmpeg, ffprobe);
        var timeline = project.timelines().get(timelineIndex);

        var paths = new ArrayList<String>();

        fileContent.add("# Generated by TurboEdit Render Server");
        for (var clip : timeline.clips()) {
            var file = project.files().get(clip.file());
            var index = subThreads.size();

            var thread = new Thread(() -> {
                var path = Path.of(basePath.toString(), file.path()).normalize().toAbsolutePath().toString();

                if (clip.startTime() == 0 && clip.endTime() == 0) {
                    fileContent.add("file '" + path + "'");
                } else {
                    try {
             /*       var probe = ffprobe.probe(path);
                    FFmpegStream stream = null;

                    for (var cStream : probe.getStreams()) {
                        if (cStream.codec_type != FFmpegStream.CodecType.VIDEO) continue;
                        stream = cStream;
                        break;
                    }*/

                        var tmpFile = File.createTempFile("tm_te_tmpv_" + index + "_", "." + path.split("\\.")[1]);
                        paths.add(index, tmpFile.getAbsolutePath());

                        var builder = new FFmpegBuilder()
                                .setInput(path)
                                .setStartOffset(clip.startTime(), TimeUnit.MILLISECONDS)
                                .addExtraArgs("-sseof", formatDuration(clip.endTime()))
                                .addOutput(tmpFile.getAbsolutePath())
                                .setAudioCodec("copy")
                                .setVideoCodec("copy")
                                .addExtraArgs("-map", "0")
                                .done();

                        var job = executor.createJob(builder);
                        job.run();

                        logger.info("SubRender-{} finished", index);
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                }

                subThreads.set(index, null);

                try {
                    for (var thr : subThreads) {
                        if (thr != null) break;

                        subThreads.clear();
                    }
                } catch (Exception e) {
                }
            });

            thread.setName("SubRender-" + subThreads.size());
            thread.start();

            subThreads.add(thread);

            try {
                Thread.sleep(200);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        }

        while (!subThreads.isEmpty()) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        }

        for (var path : paths) {
            fileContent.add("file '" + path + "'");
        }

        var tempFile = File.createTempFile("tm_te_" + project.name() + "_concat_", ".txt");

        FileUtils.writeLines(tempFile, fileContent);

        var builder = new FFmpegBuilder()
                .setFormat("concat")
                .addExtraArgs("-safe", "0")
                .setInput(tempFile.getAbsolutePath())
                .overrideOutputFiles(true)
                .addOutput(output)
                .setStrict(FFmpegBuilder.Strict.EXPERIMENTAL)
                .setVideoCodec("copy")
                .setAudioCodec("copy").addExtraArgs("-map", "0")
                .done();

        paths.add(tempFile.getAbsolutePath());

        return new RenderItem(builder, paths);
    }

    public record RenderItem(FFmpegBuilder builder, ArrayList<String> deletions) {
    }

    public static String formatDuration(long millis) {
        Duration duration = Duration.ofMillis(millis);

        var hours = duration.toHours();
        var minutes = duration.toMinutes() % 60;
        var seconds = duration.getSeconds() % 60;
        var ms = millis % 1000;

        return String.format("%02d:%02d:%02d.%03d", hours, minutes, seconds, ms);
    }
}
