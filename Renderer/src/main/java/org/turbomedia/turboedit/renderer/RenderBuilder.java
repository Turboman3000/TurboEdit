package org.turbomedia.turboedit.renderer;

import net.bramp.ffmpeg.builder.FFmpegBuilder;
import org.apache.commons.io.FileUtils;
import org.turbomedia.turboedit.shared.project.Project;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.util.ArrayList;

public class RenderBuilder {
    public static RenderItem BuildFfmpeg(Project project, String projectPath, String output) throws IOException {
        var paths = new ArrayList<String>();
        var basePath = Path.of(projectPath).getParent();

        for (var file : project.files()) {
            paths.add(Path.of(basePath.toString(), file.path()).normalize().toAbsolutePath().toString());
        }

        var fileContent = new ArrayList<String>();

        fileContent.add("# Generated by TurboEdit Render Server");

        for (var path : paths) {
            fileContent.add("file '" + path + "'");
        }

        var tempFile = File.createTempFile("tm_te_" + project.name() + "_concat_", ".txt");

        FileUtils.writeLines(tempFile, fileContent);

        var builder = new FFmpegBuilder()
                .setFormat("concat")
                .addExtraArgs("-safe", "0")
                .setInput(tempFile.getAbsolutePath())
                .overrideOutputFiles(true)
                .addOutput(output)
                .setStrict(FFmpegBuilder.Strict.EXPERIMENTAL)
                .setVideoCodec("copy")
                .setAudioCodec("copy").addExtraArgs("-map", "0")
                .done();

        return new RenderItem(builder, tempFile.getAbsolutePath());
    }

    public record RenderItem(FFmpegBuilder builder, String tempFilePath) {
    }
}
